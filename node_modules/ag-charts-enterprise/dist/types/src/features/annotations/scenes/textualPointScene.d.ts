import { _Scene, _Util } from 'ag-charts-community';
import type { AnnotationContext, Coords } from '../annotationTypes';
import type { TextualPointProperties } from '../properties/textualPointProperties';
import { AnnotationScene } from './annotationScene';
import { DivariantHandle } from './handle';
interface Anchor {
    x: number;
    y: number;
    position: 'above' | 'above-left' | 'right';
}
export declare abstract class TextualPointScene<Datum extends TextualPointProperties> extends AnnotationScene {
    static readonly LineHeight = 1.38;
    activeHandle?: string;
    protected readonly label: _Scene.Text;
    protected readonly handle: DivariantHandle;
    protected dragState?: {
        offset: Coords;
        handle: Coords;
    };
    private anchor;
    private textInputBBox?;
    setTextInputBBox(bbox?: _Scene.BBox): void;
    update(datum: Datum, context: AnnotationContext): void;
    dragStart(datum: Datum, target: Coords, context: AnnotationContext): void;
    drag(datum: Datum, target: Coords, context: AnnotationContext): void;
    toggleHandles(show: boolean | Partial<Record<'handle', boolean>>): void;
    toggleActive(active: boolean): void;
    stopDragging(): void;
    getAnchor(): Anchor;
    getCursor(): "pointer" | undefined;
    containsPoint(x: number, y: number): boolean;
    protected getTextBBox(datum: Datum, coords: _Util.Vec2, _context: AnnotationContext): _Scene.BBox;
    protected updateLabel(datum: Datum, bbox: _Scene.BBox): void;
    protected updateHandle(datum: Datum, bbox: _Scene.BBox, coords: _Util.Vec2): void;
    protected updateShape(_datum: Datum, _bbox: _Scene.BBox): void;
    protected updateAnchor(_datum: Datum, bbox: _Scene.BBox, context: AnnotationContext): {
        x: number;
        y: number;
        position: "right" | "above" | "above-left";
    };
    protected getLabelCoords(_datum: Datum, bbox: _Scene.BBox): _Util.Vec2;
    protected getHandleCoords(_datum: Datum, bbox: _Scene.BBox, _coords: _Util.Vec2): _Util.Vec2;
    protected getHandleStyles(datum: Datum): {
        fill: string | undefined;
        stroke: string | undefined;
        strokeOpacity: number | undefined;
        strokeWidth: number | undefined;
    };
    private wrapText;
    private getTextOptions;
}
export {};
