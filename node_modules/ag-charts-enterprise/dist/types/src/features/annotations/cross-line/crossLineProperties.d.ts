import { _ModuleSupport } from 'ag-charts-community';
import { type AnnotationContext, type AnnotationOptionsColorPickerType, AnnotationType } from '../annotationTypes';
declare const HorizontalLineProperties_base: (abstract new (...args: any[]) => {
    id: string;
    isValidWithContext(_context: AnnotationContext, warningPrefix: string): boolean;
    getDefaultColor(colorPickerType: AnnotationOptionsColorPickerType): string | undefined;
    locked?: boolean | undefined;
    visible?: boolean | undefined;
    set(properties: object): any;
    isValid<TContext = Omit<object, "type">>(this: TContext, warningPrefix?: string | undefined): boolean;
    toJson<J>(this: J): object;
}) & {
    new (...args: any[]): {
        value?: string | number | Date | undefined;
    };
} & {
    new (...args: any[]): {
        handle: import("../annotationProperties").HandleProperties;
    };
} & {
    new (...args: any[]): {
        axisLabel: import("../annotationProperties").AxisLabelProperties;
    };
} & {
    new (...args: any[]): {
        startCap?: "circle" | "arrow" | undefined;
        endCap?: "circle" | "arrow" | undefined;
    };
} & {
    new (...args: any[]): {
        stroke?: string | undefined;
        strokeOpacity?: number | undefined;
        strokeWidth?: number | undefined;
    };
} & {
    new (...args: any[]): {
        lineDash?: number[] | undefined;
        lineDashOffset?: number | undefined;
    };
} & typeof _ModuleSupport.BaseProperties;
export declare class HorizontalLineProperties extends HorizontalLineProperties_base {
    readonly direction = "horizontal";
    static is(value: unknown): value is HorizontalLineProperties;
    type: AnnotationType.HorizontalLine;
    isValidWithContext(context: AnnotationContext, warningPrefix: string): boolean;
    getDefaultColor(_colorPickerType: AnnotationOptionsColorPickerType): string | undefined;
    getDefaultOpacity(_colorPickerType: AnnotationOptionsColorPickerType): number | undefined;
}
declare const VerticalLineProperties_base: (abstract new (...args: any[]) => {
    id: string;
    isValidWithContext(_context: AnnotationContext, warningPrefix: string): boolean;
    getDefaultColor(colorPickerType: AnnotationOptionsColorPickerType): string | undefined;
    locked?: boolean | undefined;
    visible?: boolean | undefined;
    set(properties: object): any;
    isValid<TContext = Omit<object, "type">>(this: TContext, warningPrefix?: string | undefined): boolean;
    toJson<J>(this: J): object;
}) & {
    new (...args: any[]): {
        value?: string | number | Date | undefined;
    };
} & {
    new (...args: any[]): {
        handle: import("../annotationProperties").HandleProperties;
    };
} & {
    new (...args: any[]): {
        axisLabel: import("../annotationProperties").AxisLabelProperties;
    };
} & {
    new (...args: any[]): {
        startCap?: "circle" | "arrow" | undefined;
        endCap?: "circle" | "arrow" | undefined;
    };
} & {
    new (...args: any[]): {
        stroke?: string | undefined;
        strokeOpacity?: number | undefined;
        strokeWidth?: number | undefined;
    };
} & {
    new (...args: any[]): {
        lineDash?: number[] | undefined;
        lineDashOffset?: number | undefined;
    };
} & typeof _ModuleSupport.BaseProperties;
export declare class VerticalLineProperties extends VerticalLineProperties_base {
    readonly direction = "vertical";
    static is(value: unknown): value is VerticalLineProperties;
    type: AnnotationType.VerticalLine;
    isValidWithContext(context: AnnotationContext, warningPrefix: string): boolean;
    getDefaultColor(_colorPickerType: AnnotationOptionsColorPickerType): string | undefined;
    getDefaultOpacity(_colorPickerType: AnnotationOptionsColorPickerType): number | undefined;
}
export type CrossLineProperties = HorizontalLineProperties | VerticalLineProperties;
export {};
